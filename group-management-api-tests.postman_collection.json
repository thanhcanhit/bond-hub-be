{
  "info": {
    "_postman_id": "b7c8d9e0-f1a2-43b4-95c6-7d8e9f0a1b2c",
    "name": "Bond Hub - Group Management API Tests",
    "description": "Collection for testing the Group Management APIs in Bond Hub application, including the new kick member and dissolve group functionalities.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "Authentication endpoints to get access tokens for testing",
      "item": [
        {
          "name": "Login - User 1 (Leader)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (jsonData && jsonData.accessToken) {",
                  "    pm.collectionVariables.set(\"leaderToken\", jsonData.accessToken);",
                  "    pm.collectionVariables.set(\"leaderId\", jsonData.user.id);",
                  "    console.log(\"Saved leader token and ID\");",
                  "}",
                  "",
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"iamhoangkhang@icloud.com\",\n    \"password\": \"lehoangkhang\",\n    \"deviceType\": \"DESKTOP\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Login as Lê Hoàng Khang (will be group leader)"
          },
          "response": []
        },
        {
          "name": "Login - User 2 (Deputy)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (jsonData && jsonData.accessToken) {",
                  "    pm.collectionVariables.set(\"deputyToken\", jsonData.accessToken);",
                  "    pm.collectionVariables.set(\"deputyId\", jsonData.user.id);",
                  "    console.log(\"Saved deputy token and ID\");",
                  "}",
                  "",
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"thanhcanh.dev@gmail.com\",\n    \"password\": \"thanhcanhit\",\n    \"deviceType\": \"DESKTOP\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Login as Nguyễn Thanh Cảnh (will be deputy leader)"
          },
          "response": []
        },
        {
          "name": "Login - User 3 (Member)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (jsonData && jsonData.accessToken) {",
                  "    pm.collectionVariables.set(\"memberToken\", jsonData.accessToken);",
                  "    pm.collectionVariables.set(\"memberId\", jsonData.user.id);",
                  "    console.log(\"Saved member token and ID\");",
                  "}",
                  "",
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"nhutam050@gmail.com\",\n    \"password\": \"hothinhutam\",\n    \"deviceType\": \"DESKTOP\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Login as Hồ Thị Như Tâm (will be regular member)"
          },
          "response": []
        },
        {
          "name": "Login - User 4 (Member)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (jsonData && jsonData.accessToken) {",
                  "    pm.collectionVariables.set(\"member2Token\", jsonData.accessToken);",
                  "    pm.collectionVariables.set(\"member2Id\", jsonData.user.id);",
                  "    console.log(\"Saved member2 token and ID\");",
                  "}",
                  "",
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"bankienthanthien@gmail.com\",\n    \"password\": \"trandinhkien\",\n    \"deviceType\": \"DESKTOP\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Login as Trần Đình Kiên (will be regular member)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Group Management",
      "description": "Endpoints for creating and managing groups",
      "item": [
        {
          "name": "Create Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (jsonData && jsonData.id) {",
                  "    pm.collectionVariables.set(\"groupId\", jsonData.id);",
                  "    console.log(\"Saved group ID: \" + jsonData.id);",
                  "}",
                  "",
                  "pm.test(\"Group created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name).to.eql('Test Group');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "Test Group",
                  "type": "text"
                },
                {
                  "key": "creatorId",
                  "value": "{{leaderId}}",
                  "type": "text"
                },
                {
                  "key": "initialMembers",
                  "value": "[{\"userId\":\"{{deputyId}}\",\"addedById\":\"{{leaderId}}\"},{\"userId\":\"{{memberId}}\",\"addedById\":\"{{leaderId}}\"}]",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/groups",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups"
              ]
            },
            "description": "Create a new group with leader, deputy and member"
          },
          "response": []
        },
        {
          "name": "Get Group Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Get group details successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('members');",
                  "    pm.expect(jsonData.members).to.be.an('array');",
                  "    pm.expect(jsonData.members.length).to.be.at.least(3);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/{{groupId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{groupId}}"
              ]
            },
            "description": "Get details of the created group"
          },
          "response": []
        },
        {
          "name": "Update Member Role (Make Deputy)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Update member role successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "    pm.expect(jsonData.role).to.eql('CO_LEADER');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"role\": \"CO_LEADER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/groups/{{groupId}}/members/{{deputyId}}/role",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{groupId}}",
                "members",
                "{{deputyId}}",
                "role"
              ]
            },
            "description": "Update member role to CO_LEADER (deputy)"
          },
          "response": []
        },
        {
          "name": "Add New Member",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Add member successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "    pm.expect(jsonData.role).to.eql('MEMBER');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"groupId\": \"{{groupId}}\",\n    \"userId\": \"{{member2Id}}\",\n    \"addedById\": \"{{leaderId}}\",\n    \"role\": \"MEMBER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/groups/members",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "members"
              ]
            },
            "description": "Add a new member to the group"
          },
          "response": []
        },
        {
          "name": "Get User Groups",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get user groups successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.at.least(1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{memberToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "user"
              ]
            },
            "description": "Get all groups for the current user"
          },
          "response": []
        },
        {
          "name": "Update Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Update group successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name).to.eql('Updated Test Group');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Test Group\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/groups/{{groupId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{groupId}}"
              ]
            },
            "description": "Update group information"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Member Management",
      "description": "Endpoints for managing group members",
      "item": [
        {
          "name": "Kick Member (By Leader)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Kick member successful\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/{{groupId}}/members/{{memberId}}/kick",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{groupId}}",
                "members",
                "{{memberId}}",
                "kick"
              ]
            },
            "description": "Leader kicks a regular member"
          },
          "response": []
        },
        {
          "name": "Kick Member (By Deputy)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Kick member successful\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{deputyToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/{{groupId}}/members/{{member2Id}}/kick",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{groupId}}",
                "members",
                "{{member2Id}}",
                "kick"
              ]
            },
            "description": "Deputy leader kicks a regular member"
          },
          "response": []
        },
        {
          "name": "Kick Deputy (By Leader)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Kick deputy successful\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/{{groupId}}/members/{{deputyId}}/kick",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{groupId}}",
                "members",
                "{{deputyId}}",
                "kick"
              ]
            },
            "description": "Leader kicks a deputy leader"
          },
          "response": []
        },
        {
          "name": "Try to Kick Leader (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Cannot kick leader\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{deputyToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/{{groupId}}/members/{{leaderId}}/kick",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{groupId}}",
                "members",
                "{{leaderId}}",
                "kick"
              ]
            },
            "description": "Deputy tries to kick the leader (should fail)"
          },
          "response": []
        },
        {
          "name": "Try Leader Leave Group (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Leader cannot leave group\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/{{groupId}}/leave",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{groupId}}",
                "leave"
              ]
            },
            "description": "Leader tries to leave the group (should fail)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Group Dissolution",
      "description": "Endpoints for dissolving groups",
      "item": [
        {
          "name": "Create Group for Dissolution",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (jsonData && jsonData.id) {",
                  "    pm.collectionVariables.set(\"dissolveGroupId\", jsonData.id);",
                  "    console.log(\"Saved group ID for dissolution: \" + jsonData.id);",
                  "}",
                  "",
                  "pm.test(\"Group created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name).to.eql('Group To Dissolve');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "Group To Dissolve",
                  "type": "text"
                },
                {
                  "key": "creatorId",
                  "value": "{{leaderId}}",
                  "type": "text"
                },
                {
                  "key": "initialMembers",
                  "value": "[{\"userId\":\"{{deputyId}}\",\"addedById\":\"{{leaderId}}\"}]",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/groups",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups"
              ]
            },
            "description": "Create a new group that will be dissolved"
          },
          "response": []
        },
        {
          "name": "Try to Dissolve Group (By Deputy - Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deputy cannot dissolve group\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{deputyToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/{{dissolveGroupId}}/dissolve",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{dissolveGroupId}}",
                "dissolve"
              ]
            },
            "description": "Deputy tries to dissolve the group (should fail)"
          },
          "response": []
        },
        {
          "name": "Dissolve Group (By Leader)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Dissolve group successful\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/{{dissolveGroupId}}/dissolve",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{dissolveGroupId}}",
                "dissolve"
              ]
            },
            "description": "Leader dissolves the group"
          },
          "response": []
        },
        {
          "name": "Verify Group Dissolved",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Group should be dissolved\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{leaderToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/{{dissolveGroupId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "{{dissolveGroupId}}"
              ]
            },
            "description": "Try to get the dissolved group (should return 404)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "leaderToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "deputyToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "memberToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "member2Token",
      "value": "",
      "type": "string"
    },
    {
      "key": "leaderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "deputyId",
      "value": "",
      "type": "string"
    },
    {
      "key": "memberId",
      "value": "",
      "type": "string"
    },
    {
      "key": "member2Id",
      "value": "",
      "type": "string"
    },
    {
      "key": "groupId",
      "value": "",
      "type": "string"
    },
    {
      "key": "dissolveGroupId",
      "value": "",
      "type": "string"
    }
  ]
}
