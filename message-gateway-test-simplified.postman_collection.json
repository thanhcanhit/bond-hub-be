{
  "info": {
    "name": "Test Message Gateway WebSocket (Simplified)",
    "description": "Collection để test WebSocket gateway cho message module (đã đơn giản hóa xác thực)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Kết nối WebSocket",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{wsUrl}}/message?userId={{userId}}",
          "host": ["{{wsUrl}}"],
          "path": ["message"],
          "query": [
            {
              "key": "userId",
              "value": "{{userId}}"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Tạo kết nối WebSocket",
              "const socket = new WebSocket(`${pm.environment.get('wsUrl')}/message?userId=${pm.environment.get('userId')}`);",
              "",
              "// Thiết lập timeout cho kết nối",
              "const connectTimeout = setTimeout(() => {",
              "    pm.test('Kết nối WebSocket thất bại - Timeout', () => {",
              "        pm.expect(false).to.be.true;",
              "    });",
              "}, 5000);",
              "",
              "// Xử lý sự kiện khi kết nối mở",
              "socket.onopen = function() {",
              "    clearTimeout(connectTimeout);",
              "    pm.test('Kết nối WebSocket thành công', () => {",
              "        pm.expect(true).to.be.true;",
              "    });",
              "    ",
              "    // Đóng kết nối sau khi test xong",
              "    setTimeout(() => {",
              "        socket.close();",
              "    }, 1000);",
              "};",
              "",
              "// Xử lý sự kiện khi nhận tin nhắn",
              "socket.onmessage = function(event) {",
              "    const data = JSON.parse(event.data);",
              "    console.log('Nhận được tin nhắn:', data);",
              "};",
              "",
              "// Xử lý sự kiện khi có lỗi",
              "socket.onerror = function(error) {",
              "    pm.test('Kết nối WebSocket gặp lỗi', () => {",
              "        pm.expect(false).to.be.true;",
              "    });",
              "    console.error('WebSocket Error:', error);",
              "};",
              "",
              "// Xử lý sự kiện khi kết nối đóng",
              "socket.onclose = function(event) {",
              "    console.log('WebSocket đã đóng:', event);",
              "};"
            ]
          }
        }
      ],
      "response": []
    },
    {
      "name": "Gửi tin nhắn cá nhân",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{wsUrl}}/message?userId={{userId}}",
          "host": ["{{wsUrl}}"],
          "path": ["message"],
          "query": [
            {
              "key": "userId",
              "value": "{{userId}}"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Tạo kết nối WebSocket",
              "const socket = new WebSocket(`${pm.environment.get('wsUrl')}/message?userId=${pm.environment.get('userId')}`);",
              "",
              "// Thiết lập timeout cho kết nối",
              "const connectTimeout = setTimeout(() => {",
              "    pm.test('Kết nối WebSocket thất bại - Timeout', () => {",
              "        pm.expect(false).to.be.true;",
              "    });",
              "}, 5000);",
              "",
              "// Xử lý sự kiện khi kết nối mở",
              "socket.onopen = function() {",
              "    clearTimeout(connectTimeout);",
              "    pm.test('Kết nối WebSocket thành công', () => {",
              "        pm.expect(true).to.be.true;",
              "    });",
              "    ",
              "    // Đợi 1 giây sau khi kết nối để gửi tin nhắn",
              "    setTimeout(() => {",
              "        // Tạo dữ liệu tin nhắn",
              "        const messageData = {",
              "            event: 'sendUserMessage',",
              "            data: {",
              "                receiverId: pm.environment.get('receiverId'),",
              "                content: {",
              "                    text: 'Tin nhắn test từ Postman - ' + new Date().toISOString(),",
              "                    media: []",
              "                }",
              "            }",
              "        };",
              "        ",
              "        // Gửi tin nhắn",
              "        socket.send(JSON.stringify(messageData));",
              "        console.log('Đã gửi tin nhắn:', messageData);",
              "    }, 1000);",
              "};",
              "",
              "// Xử lý sự kiện khi nhận tin nhắn",
              "socket.onmessage = function(event) {",
              "    try {",
              "        const data = JSON.parse(event.data);",
              "        console.log('Nhận được tin nhắn:', data);",
              "        ",
              "        // Kiểm tra nếu là sự kiện newMessage",
              "        if (data.event === 'newMessage') {",
              "            pm.test('Nhận được sự kiện newMessage', () => {",
              "                pm.expect(data.data).to.have.property('message');",
              "                pm.expect(data.data.message).to.have.property('senderId');",
              "                pm.expect(data.data.message).to.have.property('receiverId');",
              "                pm.expect(data.data.message.receiverId).to.equal(pm.environment.get('receiverId'));",
              "            });",
              "            ",
              "            // Lưu messageId để sử dụng cho các test khác",
              "            if (data.data.message && data.data.message.id) {",
              "                pm.environment.set('messageId', data.data.message.id);",
              "            }",
              "            ",
              "            // Đóng kết nối sau khi nhận được tin nhắn",
              "            socket.close();",
              "        }",
              "    } catch (error) {",
              "        console.error('Lỗi khi xử lý tin nhắn:', error);",
              "    }",
              "};",
              "",
              "// Xử lý sự kiện khi có lỗi",
              "socket.onerror = function(error) {",
              "    pm.test('Kết nối WebSocket gặp lỗi', () => {",
              "        pm.expect(false).to.be.true;",
              "    });",
              "    console.error('WebSocket Error:', error);",
              "};",
              "",
              "// Xử lý sự kiện khi kết nối đóng",
              "socket.onclose = function(event) {",
              "    console.log('WebSocket đã đóng:', event);",
              "};",
              "",
              "// Đặt timeout để đóng kết nối nếu không nhận được phản hồi",
              "setTimeout(() => {",
              "    if (socket.readyState === WebSocket.OPEN) {",
              "        socket.close();",
              "    }",
              "}, 10000);"
            ]
          }
        }
      ],
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Thiết lập các biến môi trường mặc định nếu chưa có",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:3000');",
          "}",
          "",
          "if (!pm.environment.get('wsUrl')) {",
          "    pm.environment.set('wsUrl', 'ws://localhost:3000');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "userId",
      "value": "your_user_id_here",
      "type": "string"
    },
    {
      "key": "receiverId",
      "value": "receiver_user_id_here",
      "type": "string"
    },
    {
      "key": "groupId",
      "value": "group_id_here",
      "type": "string"
    },
    {
      "key": "messageId",
      "value": "",
      "type": "string"
    }
  ]
}
